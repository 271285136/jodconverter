// build a map of the dependency artifacts to use. Allows centralized definition
// of the version of artifacts to use.  In that respect it serves a role similar
// to <dependencyManagement> in Maven

ext {
  useOpenOffice = project.hasProperty('useOpenOffice')

  versions = [
  
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Gradle plugins version
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Latest version -> https://sourceforge.net/projects/checkstyle/files/checkstyle
    checkstyle_version : '8.7',
    // Latest version -> https://plugins.gradle.org/plugin/com.github.kt3k.coveralls
    coveralls_version : '2.8.2',
    // Latest version -> http://www.eclemma.org/jacoco
    jacoco_version : '0.8.0',
    // Latest version -> https://plugins.gradle.org/plugin/nebula.integtest
    nebula_project_version : '3.4.0',
    // Latest version -> https://plugins.gradle.org/plugin/io.codearte.nexus-staging
    nexus_staging_version : '0.11.0',
    // Latest version -> https://pmd.github.io
    pmd_version : '6.0.1',
    // Latest version -> https://plugins.gradle.org/plugin/com.diffplug.gradle.spotless
    spotless_version : '3.8.0',
    // Latest version -> https://plugins.gradle.org/plugin/io.spring.dependency-management
    dependency_management_version : '1.0.4.RELEASE',
    
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Java libraries version
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    // Main
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Latest version -> https://mvnrepository.com/artifact/commons-cli/commons-cli
    commons_cli_version : '1.4',
    // Latest version -> https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload
    commons_fileupload_version : '1.3.3',
    // Latest version -> https://mvnrepository.com/artifact/commons-io/commons-io
    commons_io_version : '2.6',
    // Latest version -> https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    commons_lang3_version : '3.7',
    // Latest version -> https://mvnrepository.com/artifact/com.google.code.gson/gson
    gson_version : '2.8.2',
    // Latest version -> https://mvnrepository.com/artifact/org.apache.httpcomponents/httpcore
    httpcomponents_httpcore_version : '4.4.9',
    // Latest version -> https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
    httpcomponents_httpclient_version : '4.5.4',
    // Latest version -> https://mvnrepository.com/artifact/org.apache.httpcomponents/fluent-hc
    httpcomponents_fluenthc_version : '4.5.4',
    // Latest version -> https://mvnrepository.com/artifact/org.apache.httpcomponents/httpmime
    httpcomponents_httpmime_version : '4.5.4',
    // Latest version -> https://mvnrepository.com/artifact/org.libreoffice
    libre_office_version : '5.4.2',
    // Latest version -> https://mvnrepository.com/artifact/org.openoffice
    open_office_version : '4.1.2',
    // Latest version -> https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api
    servlet_api_version : '4.0.0',
    // Latest version -> https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    slf4j_version : '1.7.25',
    // Latest version -> https://mvnrepository.com/artifact/org.springframework/spring-core
    spring_version : '5.0.3.RELEASE',
    // Latest version -> https://mvnrepository.com/artifact/org.springframework.boot/spring-boot
    springBoot_version : '1.5.9.RELEASE',
    
    // Test
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Latest version -> https://mvnrepository.com/artifact/org.assertj/assertj-core
    assertj_version : '3.9.0',
    // Latest version -> https://mvnrepository.com/artifact/nl.jqno.equalsverifier/equalsverifier
    equalsverifier_version : '2.4.2',
    // Latest version -> https://mvnrepository.com/artifact/com.google.code.findbugs/findbugs
    findbugs_version : '3.0.1',
    // Latest version -> https://mvnrepository.com/artifact/junit/junit
    junit_version : '4.12',
    // Latest version -> https://mvnrepository.com/artifact/org.mockito/mockito-core
    // 2.9.0 is the latest version compatible powermock version 1.7.3
    // See https://stackoverflow.com/questions/47240116/mockito-and-powermockito-error
    mockito_version : '2.9.0',
    // mockito_version : '2.13.1',
    // Latest version -> https://mvnrepository.com/artifact/org.powermock/powermock-api-mockito
    powermock_version : '1.7.3',
    // Latest version -> https://mvnrepository.com/artifact/com.github.tomakehurst/wiremock
    wiremock_version : '2.14.0'
  ]

  gradlePlugins = [
    
    coveralls                          : "org.kt3k.gradle.plugin:coveralls-gradle-plugin:$versions.coveralls_version",
    dependency_management              : "io.spring.gradle:dependency-management-plugin:$versions.dependency_management_version",
    nebula_project                     : "com.netflix.nebula:nebula-project-plugin:$versions.nebula_project_version",
    nexus_staging                      : "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:$versions.nexus_staging_version",
    spotless                           : "com.diffplug.spotless:spotless-plugin-gradle:$versions.spotless_version"
  ]
  
  libraries = [

    // Apache Commons Libraries
    commons_cli                        : "commons-cli:commons-cli:$versions.commons_cli_version",
    commons_fileupload                 : "commons-fileupload:commons-fileupload:$versions.commons_fileupload_version",
    commons_io                         : "commons-io:commons-io:$versions.commons_io_version",
    commons_lang3                      : "org.apache.commons:commons-lang3:$versions.commons_lang3_version",

    // Office Libraries (OpenOffice and LibreOffice)
    office_juh                         : (useOpenOffice ? "org.openoffice:juh:$versions.open_office_version"   : "org.libreoffice:juh:$versions.libre_office_version"),
    office_jurt                        : (useOpenOffice ? "org.openoffice:jurt:$versions.open_office_version"  : "org.libreoffice:jurt:$versions.libre_office_version"),
    office_ridl                        : (useOpenOffice ? "org.openoffice:ridl:$versions.open_office_version"  : "org.libreoffice:ridl:$versions.libre_office_version"),
    office_unoil                       : (useOpenOffice ? "org.openoffice:unoil:$versions.open_office_version" : "org.libreoffice:unoil:$versions.libre_office_version"),

    // Spring Libraries
    spring_core                        : "org.springframework:spring-core:$versions.spring_version",
    spring_context                     : "org.springframework:spring-context:$versions.spring_version",
    spring_test                        : "org.springframework:spring-test:$versions.spring_version",
    spring_context                     : "org.springframework:spring-context:$versions.spring_version",

    // Spring Boot libraries
    spring_boot_dependencies           : "org.springframework.boot:spring-boot-dependencies:$versions.spring_boot_version",
    spring_boot_starter                : 'org.springframework.boot:spring-boot-starter',
    spring_boot_configuration_processor: 'org.springframework.boot:spring-boot-configuration-processor',
    spring_boot_starter_test           : 'org.springframework.boot:spring-boot-starter-test',

    // HTTP Components libraries
    httpcomponents_httpcore            : "org.apache.httpcomponents:httpcore:$versions.httpcomponents_httpcore_version",
    httpcomponents_httpclient          : "org.apache.httpcomponents:httpclient:$versions.httpcomponents_httpclient_version",
    httpcomponents_fluenthc            : "org.apache.httpcomponents:fluent-hc:$versions.httpcomponents_fluenthc_version",
    httpcomponents_httpmime            : "org.apache.httpcomponents:httpmime:$versions.httpcomponents_httpmime_version",

    // Logging Libraries
    slf4j_api                          : "org.slf4j:slf4j-api:$versions.slf4j_version",
    slf4j_log4j                        : "org.slf4j:slf4j-log4j12:$versions.slf4j_version",

    // Other Libraries
    gson                               : "com.google.code.gson:gson:$versions.gson_version",
    servlet_api                        : "javax.servlet:javax.servlet-api:$versions.servlet_api_version",

    // Tests
    assertj                            : "org.assertj:assertj-core:$versions.assertj_version",
    equalsverifier                     : "nl.jqno.equalsverifier:equalsverifier:$versions.equalsverifier_version",
    junit                              : "junit:junit:$versions.junit_version",
    jsr305                             : "com.google.code.findbugs:jsr305:$versions.findbugs_version",
    findbugs                           : "com.google.code.findbugs:findbugs:$versions.findbugs_version",
    mockito                            : "org.mockito:mockito-core:$versions.mockito_version",
    powermock_junit                    : "org.powermock:powermock-module-junit4:$versions.powermock_version",
    powermock_mockito                  : "org.powermock:powermock-api-mockito2:$versions.powermock_version",
    wiremock                           : "com.github.tomakehurst:wiremock:$versions.wiremock_version"
  ]
}