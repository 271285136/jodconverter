import org.jodconverter.Deps
import org.jodconverter.Plugins

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Plugins

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'nebula.facet'
apply plugin: 'jacoco'
apply plugin: 'com.diffplug.gradle.spotless'

//println("sourceEncoding $sourceEncoding")
//println("baselineJavaVersion $baselineJavaVersion")

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Integration tests SourceSet configuration

facets {
    integTest {
        parentSourceSet = 'test'
        //includeInCheckLifecycle = false
    }
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Dependencies

dependencies {
    implementation platform(Deps.springBootDependencies)

    testImplementation Deps.assertj
    testImplementation Deps.junitJupiterApi
    testImplementation Deps.mockito

    testRuntimeOnly Deps.junitJupiterEngine
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Compile

java {
    sourceCompatibility = baselineJavaVersion
    targetCompatibility = baselineJavaVersion
}

if (JavaVersion.current() < baselineJavaVersion) {
    throw new GradleException("This build must be run with at least Java 8.")
}

tasks.withType(JavaCompile) {
    options.encoding = sourceEncoding
    options.compilerArgs << "-Xlint:-options"
    options.compilerArgs << "-Xlint:unchecked"
    options.compilerArgs << "-Xlint:deprecation"
    options.incremental = true
    options.fork = true
    //options.debug = true
    //options.fork = true
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Eclipse

eclipse {
    jdt {
        sourceCompatibility = baselineJavaVersion
        targetCompatibility = baselineJavaVersion
    }
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Pmd

pmd {
    toolVersion = Plugins.pmdVersion
    ruleSetConfig = rootProject.resources.text.fromFile("ruleset.xml")
    ignoreFailures = true
    rulePriority = 5
    // Don't use the default gradle rule sets
    ruleSets = []
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Checkstyle

checkstyle {
    toolVersion = Plugins.checkstyleVersion
    config = rootProject.resources.text.fromFile("checkstyle.xml")
}

// Disable checkstyle for test code
[checkstyleTest, checkstyleIntegTest]*.enabled = false

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Spotless

spotless {

    java {
        // Format code using google java format
        googleJavaFormat()

        // Import order
        importOrderFile "$rootDir/spotless.importorder"

        // Java Source Header File
        licenseHeaderFile("$rootDir/spotless.license.java")
    }
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Test

test {
    useJUnitPlatform {
        includeEngines "junit-jupiter", "junit-vintage"
    }
    failFast = true

    // Uncomment when we want to see the logs while testing
    //testLogging.showStandardStreams = true
}

integTest {
    useJUnitPlatform {
        includeEngines "junit-jupiter", "junit-vintage"
    }
    failFast = true

    // Uncomment when we want to see the logs while testing
    //testLogging.showStandardStreams = true
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Jacoco

// Configures the jacocoTestReport task
jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    dependsOn tasks.withType(Test)
    reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = false
    }
}
check.dependsOn jacocoTestReport

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Licensing

task copyLicense(type: Copy) {
    from file("$rootProject.projectDir/LICENSE")
    into file("$projectDir/src/main/resources/META-INF/")
}

jar {
    dependsOn copyLicense
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Artifacts

// sources jar
task sourcesJar(type: Jar, dependsOn: classes) {
    description = "Builds a source jar artifact suitable for deployment."
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

// javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    description = "Builds a javadoc jar artifact suitable for deployment."
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

jar {
    manifest {
        attributes(
                "Automatic-Module-Name" : project.name.replace("-", "."),
                "Build-Jdk-Spec" : baselineJavaVersion,
                "Built-By" : "jodconverter.org",
                "Bundle-License" : "https://github.com/sbraconnier/jodconverter/wiki/LICENSE",
                "Bundle-Vendor" : "JODConverter",
                "Bundle-DocURL" : "https://github.com/sbraconnier/jodconverter/wiki",
                "Implementation-Title": project.hasProperty('moduleName') ? project.moduleName : project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "JODConverter Team",
                "Implementation-Vendor-Id": "org.jodconverter",
                "Implementation-Url": "http://jodconverter.org",
                "Specification-Title": project.hasProperty('moduleName') ? project.moduleName : project.name,
                "Specification-Version": project.version,
                "Specification-Vendor": "JODConverter Team",
                "Provider": gradle
        )
    }
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Documentation

tasks.withType(Javadoc) {
    options.addBooleanOption("Xdoclint:none")
    //options.addStringOption('Xdoclint:none', '-quiet')
}

javadoc {
    classpath = configurations.compileClasspath + configurations.runtimeClasspath
    source = sourceSets.main.allJava

    options.with {
        windowTitle "JODConverter API Documentation"
        docTitle "$project.name $project.version API Documentation"
        bottom = 'Copyright &#169; 2016 - present <a href="http://jodconverter.org">JODConverter Team</a>'
        charSet "UTF-8"
        encoding "UTF-8"
        docEncoding "UTF-8"
        memberLevel = JavadocMemberLevel.PROTECTED
        links "https://api.libreoffice.org/docs/java/ref"
        if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
            links "https://docs.oracle.com/javase/8/docs/api"
        } else if (JavaVersion.current() == JavaVersion.VERSION_11) {
            links "https://docs.oracle.com/en/java/javase/11/docs/api"
        }
        links "https://docs.spring.io/spring-boot/docs/${Deps.springBootVersion}/api"
        links "https://commons.apache.org/proper/commons-lang/javadocs/api-3.9"
    }
}